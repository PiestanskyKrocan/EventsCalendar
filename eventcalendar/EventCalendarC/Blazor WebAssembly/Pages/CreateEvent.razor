@page "/CreateEvent"
@using Domain.Model
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@inject IUserService userService
@inject IEventService eventService
@inject NavigationManager NavigationManager
<h3>CreateEvent</h3>

<div class="card">
    @if (users == null)
    {
        <label>Loading users...</label>
    }
    else if (!users.Any())
    {
        <label>No users, you cannot create a Event without assignee.</label>
    }
    else
    {
        <h3>Create Event</h3>
        <div class="form-group field">
            <label>Title:</label>
            <input type="text" @bind="eventTitle"/>
        </div>
        <div class="form-group field">
            <label>Body Text:</label>
            <input type="text" @bind="bodyText"/>
        </div>
        <div class="form-group field">
            <label>Start Time:</label>
            <input type="text" @bind="startTime"/>
        </div>
        <div class="form-group field">
            <label>End Time:</label>
            <input type="text" @bind="endTime"/>
        </div>
        <div class="form-group field">
            <label>Address:</label>
            <input type="text" @bind="address"/>
        </div>
        <div class="form-group field">
            <label>Assignee:</label>
            <select @bind="selectedUserId">
                <option>Choose</option>
                @foreach (User user in users)
                {
                    <option value="@user.Id">@user.UserName</option>
                }
            </select>
        </div>
        <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <button @onclick="Create" class="acceptbtn">Create</button>
        </div>
    }
</div>

@code {
    private IEnumerable<User>? users;
    private int? selectedUserId;
    private string eventTitle = "";
    private string bodyText = "";
    private string startTime = "";
    private string endTime = "";
    private string address = "";

    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await userService.GetUsersAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Create()
    {
        msg = "";
        if (selectedUserId == null)
        {
            msg = "You must select an assignee!";
            return;
        }
        if (string.IsNullOrEmpty(eventTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(bodyText))
        {
            msg = "Body Text cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(startTime))
        {
            msg = "Start time cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(endTime))
        {
            msg = "End time cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(address))
        {
            msg = "Address cannot be empty!";
            return;
        }

        try
        {
            EventCreationDto eventCreation = new((int)selectedUserId, eventTitle, bodyText, startTime, endTime, address);
            await eventService.CreateAsync(eventCreation);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}