@page "/EditEvent/{Id:int}"
@using Domain.DTOs
@using Domain.Model
@using HttpClients.ClientInterfaces
@inject IUserService UserService
@inject IEventService EventService
@inject NavigationManager NavigationManager

<h3>EditEvent</h3>

<div class="card">
    @if (_users == null)
    {
        <label>Loading users...</label>
    }
    else if (!_users.Any())
    {
        <label>No users, you cannot create a Event</label>
    }
    else if (_eventUpdateDto == null)
    {
        <label>Loading Event data..</label>
    }
    else
    {
        <h3>Update Event</h3>
        <div class="form-group field">
            <label>Title:</label>
            <input type="text" @bind="_eventUpdateDto.Title"/>
        </div>
        <div class="form-group field">
            <label>Assignee:</label>
            <select @bind="_eventUpdateDto.OwnerId">
                <option>Choose</option>
                @foreach (User user in _users)
                {
                    <option value="@user.Id">@user.UserName</option>
                }
            </select>
        </div>
        <div class="button-row">
            <button @onclick="UpdateAsync" class="acceptbtn">Update</button>
        </div>
    }
    @if (!string.IsNullOrEmpty(_msg))
    {
        <label style="color: red">@_msg</label>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private EventUpdateDto _eventUpdateDto = null!;
    private string _msg = "";
    private IEnumerable<User>? _users;
    
    protected override async Task OnInitializedAsync()
    {
        _msg = "";
        try
        {
            _users = await UserService.GetUsersAsync();
            Event eEvent = await EventService.GetByIdAsync(Id);
            User currentlyAssigned = _users.First(user => user.Id.Equals(eEvent.Owner.Id));

            _eventUpdateDto = new(Id)
            {
                Title = eEvent.Title,
                OwnerId = currentlyAssigned.Id
            };
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _msg = e.Message;
        }
    }
    
    private async Task UpdateAsync()
    {
        try
        {
            await EventService.UpdateAsync(_eventUpdateDto);
            NavigationManager.NavigateTo("/ViewEvents");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _msg = e.Message;
        }
    }
}